**Designing UI Components for Listing and Viewing Users**

### Overview

For this task, we will design and implement UI components for listing and viewing users. We will use HTML, CSS, and JavaScript to create a simple and user-friendly interface.

### Requirements

- List users in a table format with the following columns: Username, Email, Role, and Actions.
- Each user should have an edit button to view their details.
- Each user should have a delete button to delete their account.
- When a user clicks on the edit button, a modal will appear to view their details.
- When a user clicks on the delete button, a confirmation modal will appear to confirm deletion.

### HTML Structure

```html
<!-- index.html -->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Users List</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>Users List</h1>
        <button id="add-user-btn">Add User</button>
        <table id="users-table">
            <thead>
                <tr>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Role</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="users-table-body">
                <!-- Users will be listed here -->
            </tbody>
        </table>
        <!-- Modal for viewing user details -->
        <div id="view-user-modal" class="modal">
            <div class="modal-content">
                <span class="close">&times;</span>
                <h2 id="user-name"></h2>
                <p id="user-email"></p>
                <p id="user-role"></p>
            </div>
        </div>
        <!-- Modal for deleting user -->
        <div id="delete-user-modal" class="modal">
            <div class="modal-content">
                <span class="close">&times;</span>
                <p>Are you sure you want to delete this user?</p>
                <button id="delete-user-btn">Delete</button>
                <button id="cancel-delete-btn">Cancel</button>
            </div>
        </div>
        <!-- Add user form -->
        <form id="add-user-form" style="display: none;">
            <input type="text" id="username" placeholder="Username">
            <input type="email" id="email" placeholder="Email">
            <select id="role">
                <option value="admin">Admin</option>
                <option value="user">User</option>
            </select>
            <button id="save-user-btn">Save</button>
        </form>
    </div>

    <script src="script.js"></script>
</body>
</html>
```

### CSS Styles

```css
/* styles.css */

body {
    font-family: Arial, sans-serif;
}

.container {
    max-width: 800px;
    margin: 40px auto;
    padding: 20px;
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

#users-table {
    width: 100%;
    border-collapse: collapse;
}

#users-table th, #users-table td {
    border: 1px solid #ddd;
    padding: 10px;
    text-align: left;
}

#users-table th {
    background-color: #f0f0f0;
}

#add-user-btn {
    background-color: #4CAF50;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

#add-user-btn:hover {
    background-color: #3e8e41;
}

.modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}

#add-user-form {
    display: none;
}

#save-user-btn {
    background-color: #4CAF50;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

#save-user-btn:hover {
    background-color: #3e8e41;
}
```

### JavaScript Implementation

```javascript
// script.js

// Get elements
const usersTableBody = document.getElementById('users-table-body');
const addUserBtn = document.getElementById('add-user-btn');
const addUserForm = document.getElementById('add-user-form');
const saveUserBtn = document.getElementById('save-user-btn');
const viewUserModal = document.getElementById('view-user-modal');
const deleteUserModal = document.getElementById('delete-user-modal');
const deleteUserBtn = document.getElementById('delete-user-btn');
const cancelDeleteBtn = document.getElementById('cancel-delete-btn');

// Add event listeners
addUserBtn.addEventListener('click', () => {
    addUserForm.style.display = 'block';
});

saveUserBtn.addEventListener('click', (e) => {
    e.preventDefault();
    const username = document.getElementById('username').value;
    const email = document.getElementById('email').value;
    const role = document.getElementById('role').value;
    // Save user data to database or API
    // For demonstration purposes, we'll just add it to the table
    const userRow = document.createElement('tr');
    const usernameCell = document.createElement('td');
    const emailCell = document.createElement('td');
    const roleCell = document.createElement('td');
    const actionsCell = document.createElement('td');
    const editBtn = document.createElement('button');
    const deleteBtn = document.createElement('button');
    usernameCell.textContent = username;
    emailCell.textContent = email;
    roleCell.textContent = role;
    editBtn.textContent = 'Edit';
    deleteBtn.textContent = 'Delete';
    actionsCell.appendChild(editBtn);
    actionsCell.appendChild(deleteBtn);
    userRow.appendChild(usernameCell);
    userRow.appendChild(emailCell);
    userRow.appendChild(roleCell);
    userRow.appendChild(actionsCell);
    usersTableBody.appendChild(userRow);
    addUserForm.style.display = 'none';
});

// View user details
document.addEventListener('click', (e) => {
    if (e.target.classList.contains('edit-btn')) {
        const username = e.target.parentNode.parentNode.children[0].textContent;
        const email = e.target.parentNode.parentNode.children[1].textContent;
        const role = e.target.parentNode.parentNode.children[2].textContent;
        const userNameElement = document.getElementById('user-name');
        const userEmailElement = document.getElementById('user-email');
        const userRoleElement = document.getElementById('user-role');
        userNameElement.textContent = username;
        userEmailElement.textContent = email;
        userRoleElement.textContent = role;
        viewUserModal.style.display = 'block';
    }
});

// Delete user
document.addEventListener('click', (e) => {
    if (e.target.classList.contains('delete-btn')) {
        const username = e.target.parentNode.parentNode.children[0].textContent;
        deleteUserModal.style.display = 'block';
        const deleteUserElement = document.getElementById('delete-user-btn');
        deleteUserElement.textContent = `Delete ${username}?`;
    }
});

// Confirm deletion
deleteUserBtn.addEventListener('click', () => {
    // Delete user data from database or API
    // For demonstration purposes, we'll just remove the row from the table
    const username = deleteUserBtn.textContent.split(' ')[1];
    const deleteRow = document.querySelectorAll('tr');
    Array.from(deleteRow).forEach((row) => {
        if (row.children[0].textContent === username) {
            row.remove();
        }
    });
    deleteUserModal.style.display = 'none';
});

// Cancel deletion
cancelDeleteBtn.addEventListener('click', () => {
    deleteUserModal.style.display = 'none';
});

// Close modal
document.addEventListener('click', (e) => {
    if (e.target.classList.contains('close')) {
        viewUserModal.style.display = 'none';
        deleteUserModal.style.display = 'none';
    }
});
```

This implementation provides a basic UI for listing and viewing users, with the ability to add new users, edit existing users, and delete users. The JavaScript code uses event listeners to handle user interactions and update the UI accordingly. Note that this is a simplified example and you may need to modify it to fit the specific requirements of your application.