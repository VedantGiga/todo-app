**Testing Express Server API Endpoints**

To test the Express server API endpoints for correctness, including error handling and edge cases, we will use the Jest testing framework and the Supertest library. Here's an example of how to do it:

### Project Structure

Let's assume we have the following project structure:
```markdown
project/
app.js
controllers/
user.controller.js
models/
user.model.js
routes/
user.routes.js
tests/
user.test.js
package.json
```

### Dependencies

In `package.json`, add the following dependencies:
```json
"dependencies": {
  "express": "^4.18.2",
  "mongoose": "^6.4.2"
},
"devDependencies": {
  "@types/jest": "^29.4.60",
  "jest": "^29.4.0",
  "supertest": "^6.2.4"
}
```

### User Model

In `models/user.model.js`, define the User model using Mongoose:
```javascript
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: String,
  email: String
});

const User = mongoose.model('User', userSchema);

module.exports = User;
```

### User Controller

In `controllers/user.controller.js`, define the User controller:
```javascript
const User = require('../models/user.model');

const createUser = async (req, res) => {
  try {
    const user = new User(req.body);
    await user.save();
    res.status(201).send(user);
  } catch (error) {
    res.status(500).send(error);
  }
};

const getUsers = async (req, res) => {
  try {
    const users = await User.find().exec();
    res.send(users);
  } catch (error) {
    res.status(500).send(error);
  }
};

const getUser = async (req, res) => {
  try {
    const user = await User.findById(req.params.id).exec();
    if (!user) {
      res.status(404).send({ message: 'User not found' });
    } else {
      res.send(user);
    }
  } catch (error) {
    res.status(500).send(error);
  }
};

const updateUser = async (req, res) => {
  try {
    const user = await User.findByIdAndUpdate(req.params.id, req.body, { new: true }).exec();
    if (!user) {
      res.status(404).send({ message: 'User not found' });
    } else {
      res.send(user);
    }
  } catch (error) {
    res.status(500).send(error);
  }
};

const deleteUser = async (req, res) => {
  try {
    await User.findByIdAndDelete(req.params.id).exec();
    res.send({ message: 'User deleted successfully' });
  } catch (error) {
    res.status(500).send(error);
  }
};

module.exports = { createUser, getUsers, getUser, updateUser, deleteUser };
```

### User Routes

In `routes/user.routes.js`, define the User routes:
```javascript
const express = require('express');
const router = express.Router();
const { createUser, getUsers, getUser, updateUser, deleteUser } = require('../controllers/user.controller');

router.post('/', createUser);
router.get('/', getUsers);
router.get('/:id', getUser);
router.put('/:id', updateUser);
router.delete('/:id', deleteUser);

module.exports = router;
```

### App.js

In `app.js`, define the Express app and mount the routes:
```javascript
const express = require('express');
const app = express();
const userRoutes = require('./routes/user.routes');
const mongoose = require('mongoose');

mongoose.connect('mongodb://localhost:27017/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true });

app.use(express.json());
app.use('/api/users', userRoutes);

app.listen(3000, () => {
  console.log('Server listening on port 3000');
});
```

### Test User Controller

In `tests/user.test.js`, write tests for the User controller:
```javascript
const request = require('supertest');
const app = require('../app');
const User = require('../models/user.model');
const { createUser, getUsers, getUser, updateUser, deleteUser } = require('../controllers/user.controller');

describe('User Controller', () => {
  beforeEach(async () => {
    await User.deleteMany();
  });

  afterEach(async () => {
    await User.deleteMany();
  });

  describe('createUser', () => {
    it('should create a new user', async () => {
      const response = await request(app).post('/api/users').send({ name: 'John Doe', email: 'john.doe@example.com' });
      expect(response.status).toBe(201);
      expect(response.body.name).toBe('John Doe');
      expect(response.body.email).toBe('john.doe@example.com');
    });

    it('should return an error if the user already exists', async () => {
      const response = await request(app).post('/api/users').send({ name: 'John Doe', email: 'john.doe@example.com' });
      const response2 = await request(app).post('/api/users').send({ name: 'John Doe', email: 'john.doe@example.com' });
      expect(response2.status).toBe(400);
      expect(response2.body.message).toBe('User already exists');
    });
  });

  describe('getUsers', () => {
    it('should return all users', async () => {
      const response = await request(app).post('/api/users').send({ name: 'John Doe', email: 'john.doe@example.com' });
      const response2 = await request(app).post('/api/users').send({ name: 'Jane Doe', email: 'jane.doe@example.com' });
      const response3 = await request(app).get('/api/users');
      expect(response3.status).toBe(200);
      expect(response3.body.length).toBe(2);
    });
  });

  describe('getUser', () => {
    it('should return a user by id', async () => {
      const response = await request(app).post('/api/users').send({ name: 'John Doe', email: 'john.doe@example.com' });
      const response2 = await request(app).get('/api/users/' + response.body._id);
      expect(response2.status).toBe(200);
      expect(response2.body.name).toBe('John Doe');
      expect(response2.body.email).toBe('john.doe@example.com');
    });

    it('should return a 404 if the user does not exist', async () => {
      const response = await request(app).get('/api/users/1234567890123456789012345678901234567890');
      expect(response.status).toBe(404);
      expect(response.body.message).toBe('User not found');
    });
  });

  describe('updateUser', () => {
    it('should update a user', async () => {
      const response = await request(app).post('/api/users').send({ name: 'John Doe', email: 'john.doe@example.com' });
      const response2 = await request(app).put('/api/users/' + response.body._id).send({ name: 'Jane Doe', email: 'jane.doe@example.com' });
      expect(response2.status).toBe(200);
      expect(response2.body.name).toBe('Jane Doe');
      expect(response2.body.email).toBe('jane.doe@example.com');
    });

    it('should return a 404 if the user does not exist', async () => {
      const response = await request(app).put('/api/users/1234567890123456789012345678901234567890').send({ name: 'Jane Doe', email: 'jane.doe@example.com' });
      expect(response.status).toBe(404);
      expect(response.body.message).toBe('User not found');
    });
  });

  describe('deleteUser', () => {
    it('should delete a user', async () => {
      const response = await request(app).post('/api/users').send({ name: 'John Doe', email: 'john.doe@example.com' });
      const response2 = await request(app).delete('/api/users/' + response.body._id);
      expect(response2.status).toBe(200);
      expect(response2.body.message).toBe('User deleted successfully');
    });

    it('should return a 404 if the user does not exist', async () => {
      const response = await request(app).delete('/api/users/1234567890123456789012345678901234567890');
      expect(response.status).toBe(404);
      expect(response.body.message).toBe('User not found');
    });
  });
});
```

### Running the Tests

To run the tests, execute the following command in the terminal:
```bash
jest
```

This will run all the tests in the `tests` directory and display the results. If all the tests pass, you should see a message indicating that the tests were successful.