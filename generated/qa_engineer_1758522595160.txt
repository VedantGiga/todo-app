To write unit tests for a new schema, we'll use the Python testing framework `unittest`. We'll create a test class that contains methods for each test case. We'll also use the `sqlite3` database to test our schema.

**schema.py**
```python
import sqlite3

class Schema:
    def create_table(self, conn):
        c = conn.cursor()
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                email TEXT NOT NULL UNIQUE
            )
        ''')
        conn.commit()

    def insert_user(self, conn, name, email):
        c = conn.cursor()
        c.execute('INSERT INTO users (name, email) VALUES (?, ?)', (name, email))
        conn.commit()

    def get_user(self, conn, email):
        c = conn.cursor()
        c.execute('SELECT * FROM users WHERE email = ?', (email,))
        return c.fetchone()
```

**test_schema.py**
```python
import unittest
from sqlite3 import Error
from schema import Schema

class TestSchema(unittest.TestCase):
    def setUp(self):
        self.schema = Schema()
        self.conn = sqlite3.connect(':memory:')

    def tearDown(self):
        self.conn.close()

    def test_create_table(self):
        self.schema.create_table(self.conn)
        c = self.conn.cursor()
        c.execute('SELECT name FROM sqlite_master WHERE type="table" AND name="users"')
        self.assertEqual(c.fetchone()[0], 'users')

    def test_insert_user(self):
        self.schema.insert_user(self.conn, 'John Doe', 'john@example.com')
        c = self.conn.cursor()
        c.execute('SELECT * FROM users WHERE email = ?', ('john@example.com',))
        self.assertEqual(c.fetchone(), (1, 'John Doe', 'john@example.com'))

    def test_get_user(self):
        self.schema.insert_user(self.conn, 'John Doe', 'john@example.com')
        user = self.schema.get_user(self.conn, 'john@example.com')
        self.assertEqual(user, (1, 'John Doe', 'john@example.com'))

    def test_get_user_nonexistent(self):
        user = self.schema.get_user(self.conn, 'nonexistent@example.com')
        self.assertIsNone(user)

    def test_insert_duplicate_email(self):
        self.schema.insert_user(self.conn, 'John Doe', 'john@example.com')
        with self.assertRaises(Error):
            self.schema.insert_user(self.conn, 'Jane Doe', 'john@example.com')

if __name__ == '__main__':
    unittest.main()
```

In this example, we've created a `Schema` class that encapsulates the database operations. We've also created a test class `TestSchema` that contains methods for each test case. Each test method starts with the `test_` prefix to indicate that it's a test.

The `setUp` method is called before each test method, and it creates a new in-memory SQLite database connection. The `tearDown` method is called after each test method, and it closes the database connection.

We've tested the following scenarios:

1. Creating the `users` table
2. Inserting a user with a unique email address
3. Retrieving a user by email address
4. Retrieving a non-existent user
5. Attempting to insert a user with a duplicate email address

Each test method uses assertions to verify that the expected behavior occurs. If any of the assertions fail, the test will fail and display an error message.

To run the tests, save both files and execute the `test_schema.py` file using Python. You should see a report indicating whether each test passed or failed.