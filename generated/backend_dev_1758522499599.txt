Here's an example of how you can create a RESTful API using Node.js and Express.js to manage users.

### Project Structure

```bash
project/
app.js
config/
db.js
routes/
users.js
models/
User.js
package.json
```

### Dependencies

```bash
npm install express mongoose body-parser jsonwebtoken bcrypt
```

### Models/User.js

```javascript
// models/User.js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  role: { type: String, default: 'user' }
});

const User = mongoose.model('User', userSchema);

module.exports = User;
```

### Config/db.js

```javascript
// config/db.js
const mongoose = require('mongoose');

mongoose.connect('mongodb://localhost:27017/mydatabase', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

const db = mongoose.connection;

db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function () {
  console.log('Connected to MongoDB');
});

module.exports = mongoose;
```

### Routes/users.js

```javascript
// routes/users.js
const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const mongoose = require('../config/db');

router.post('/create', async (req, res) => {
  try {
    const { name, email, password } = req.body;

    if (!name || !email || !password) {
      return res.status(400).json({ message: 'All fields are required' });
    }

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: 'Email already exists' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ name, email, password: hashedPassword });

    await user.save();
    const token = jwt.sign({ userId: user._id }, process.env.SECRET_KEY, {
      expiresIn: '1h'
    });

    return res.json({ token });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: 'Internal Server Error' });
  }
});

router.get('/read/:id', async (req, res) => {
  try {
    const id = req.params.id;
    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    return res.json(user);
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: 'Internal Server Error' });
  }
});

router.put('/update/:id', async (req, res) => {
  try {
    const id = req.params.id;
    const { name, email, password } = req.body;

    if (!name || !email || !password) {
      return res.status(400).json({ message: 'All fields are required' });
    }

    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    user.name = name;
    user.email = email;
    user.password = await bcrypt.hash(password, 10);

    await user.save();
    return res.json(user);
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: 'Internal Server Error' });
  }
});

router.delete('/delete/:id', async (req, res) => {
  try {
    const id = req.params.id;

    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    await user.remove();
    return res.json({ message: 'User deleted successfully' });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: 'Internal Server Error' });
  }
});

module.exports = router;
```

### App.js

```javascript
// app.js
const express = require('express');
const mongoose = require('./config/db');
const usersRouter = require('./routes/users');

const app = express();

app.use(express.json());
app.use('/api/users', usersRouter);

const port = process.env.PORT || 3000;

app.listen(port, () => {
  console.log(`Server listening on port ${port}`);
});
```

### Test the API

You can test the API using a tool like Postman or cURL.

* Create a user: `POST /api/users/create` with JSON body `{ "name": "John Doe", "email": "johndoe@example.com", "password": "password" }`
* Read a user: `GET /api/users/read/1234567890abcdef` (replace `1234567890abcdef` with the actual user ID)
* Update a user: `PUT /api/users/update/1234567890abcdef` with JSON body `{ "name": "Jane Doe", "email": "janedoe@example.com", "password": "newpassword" }`
* Delete a user: `DELETE /api/users/delete/1234567890abcdef`

Note that you'll need to replace `process.env.SECRET_KEY` with a actual secret key in the `users.js` file.

This is a basic example and you should consider implementing authentication and authorization mechanisms to secure your API.